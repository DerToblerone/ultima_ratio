#ifndef TABLES_H
#define TABLES_H

#include <array>

#include "types.h"

constexpr int pos_table_size = 64*13;

// These values are piece value and positional value in one
std::array<uint8_t, pos_table_size> piece_square_tbl = {0};

// In the beginning, use this table
std::array<uint8_t, pos_table_size> piece_square_tbl_opening = {
            // Empty values
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            
            // w_pawn
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 23, 23, 31, 29, 25,
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 26, 30, 25, 25, 24,
            25, 25, 25, 28, 31, 25, 25, 25,
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 25, 25, 25, 25, 25,

            // w_knight
            72, 72, 72, 72, 72, 75, 72, 72,
            72, 75, 75, 73, 73, 75, 75, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 75, 76, 76, 76, 76, 75, 72,
            72, 75, 76, 77, 77, 76, 75, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 72, 72, 72, 72, 72, 72, 72,

            // w_bishop
            75, 75, 73, 75, 75, 73, 75, 75,
            75, 75, 75, 74, 74, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,

            // w_rook
            125, 125, 125, 126, 125, 126, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,

            // w_queen
            225, 225, 225, 228, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,

            // w_king
            0, 1, 8, 0, 1, 0, 10, 1,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,

            // Black

            // b_pawn
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 28, 31, 25, 25, 25,
            25, 25, 25, 26, 30, 25, 25, 24,
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 23, 23, 31, 29, 25,
            25, 25, 25, 25, 25, 25, 25, 25,

            // b_knight
            72, 72, 72, 72, 72, 75, 72, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 75, 76, 77, 77, 76, 75, 72,
            72, 75, 76, 76, 76, 76, 75, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 75, 75, 73, 73, 75, 75, 72,
            72, 72, 72, 72, 72, 72, 72, 72,

            // b_bishop
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 75, 75, 75, 75, 75,
            75, 75, 75, 74, 74, 75, 75, 75,
            75, 75, 73, 75, 75, 73, 75, 75,

            // b_rook
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 126, 125, 126, 125, 125,

            // b_queen
            225, 225, 225, 225, 220, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 228, 225, 225, 225, 225,

            // b_king
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 1, 8, 0, 1, 0, 10, 1,



};

// As material gets less, use this table
std::array<uint8_t, pos_table_size> piece_square_tbl_endgame = {
            // Empty values
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            
            // w_pawn
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 25, 25, 25, 25, 25,
            27, 27, 27, 27, 27, 27, 27, 27,
            29, 29, 29, 29, 29, 29, 29, 29,
            32, 32, 32, 32, 32, 32, 32, 32,
            40, 40, 40, 40, 40, 40, 40, 40,
            50, 50, 50, 50, 50, 50, 50, 50,
            25, 25, 25, 25, 25, 25, 25, 25,

            // w_knight
            72, 72, 72, 72, 72, 75, 72, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 75, 76, 76, 76, 76, 75, 72,
            72, 75, 76, 77, 77, 76, 75, 72,
            72, 75, 76, 77, 77, 76, 75, 72,
            72, 75, 76, 76, 76, 76, 75, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 72, 72, 72, 72, 72, 72, 72,

            // w_bishop
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,

            // w_rook
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,

            // w_queen
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,

            // w_king
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 2, 2, 3, 3, 2, 2, 0,
            0, 2, 2, 3, 3, 2, 2, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0, 0, 0,

            // Black

            // b_pawn
            25, 25, 25, 25, 25, 25, 25, 25,
            50, 50, 50, 50, 50, 50, 50, 50,
            40, 40, 40, 40, 40, 40, 40, 40,
            32, 32, 32, 32, 32, 32, 32, 32,
            29, 29, 29, 29, 29, 29, 29, 29,
            27, 27, 27, 27, 27, 27, 27, 27,
            25, 25, 25, 25, 25, 25, 25, 25,
            25, 25, 25, 25, 25, 25, 25, 25,

            // b_knight
            72, 72, 72, 72, 72, 75, 72, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 75, 76, 76, 76, 76, 75, 72,
            72, 75, 76, 77, 77, 76, 75, 72,
            72, 75, 76, 77, 77, 76, 75, 72,
            72, 75, 76, 76, 76, 76, 75, 72,
            72, 75, 75, 75, 75, 75, 75, 72,
            72, 72, 72, 72, 72, 72, 72, 72,

            // b_bishop
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,
            77, 77, 77, 77, 77, 77, 77, 77,

            // b_rook
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125, 125, 125,

            // b_queen
            225, 225, 225, 225, 220, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,
            225, 225, 225, 225, 225, 225, 225, 225,

            // b_king
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 2, 2, 3, 3, 2, 2, 0,
            0, 2, 2, 3, 3, 2, 2, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 2, 2, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0, 0, 0,



};

std::array<uint8_t, 13> material_value = {
    0, // empty
    1, // w_pawn
    3, // w_knight
    3, // w_bishop
    5, // w_rook
    9, // w_queen
    0, // w_king
    1, // now black...
    3,
    3,
    5,
    9,
    0
};

#endif //TABLES_H